/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NFS_H_RPCGEN
#define _NFS_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAXDATA 8192
#define NFSMAXPATHLEN 1024
#define MAXNAMLEN 255
#define COOKIESIZE 4
#define FHSIZE 32

enum Stat {
	NFS_OK = 0,
	NFSERR_PERM = 1,
	NFSERR_NOENT = 2,
	NFSERR_IO = 5,
	NFSERR_NXIO = 6,
	NFSERR_ACCES = 13,
	NFSERR_EXIST = 17,
	NFSERR_NODEV = 19,
	NFSERR_NOTDIR = 20,
	NFSERR_ISDIR = 21,
	NFSERR_FBIG = 27,
	NFSERR_NOSPC = 28,
	NFSERR_ROFS = 30,
	NFSERR_NAMETOOLONG = 63,
	NFSERR_NOTEMPTY = 66,
	NFSERR_DQUOT = 69,
	NFSERR_STALE = 70,
	NFSERR_WFLUSH = 99,
};
typedef enum Stat Stat;

enum FType {
	NFNON = 0,
	NFREG = 1,
	NFDIR = 2,
	NFBLK = 3,
	NFCHR = 4,
	NFLNK = 5,
};
typedef enum FType FType;

typedef char FHandle[FHSIZE];

struct TimeVal {
	u_int seconds;
	u_int useconds;
};
typedef struct TimeVal TimeVal;

struct FAttr {
	FType type;
	u_int mode;
	u_int nlink;
	u_int uid;
	u_int gid;
	u_int size;
	u_int blocksize;
	u_int rdev;
	u_int blocks;
	u_int fsid;
	u_int fileid;
	TimeVal atime;
	TimeVal mtime;
	TimeVal ctime;
};
typedef struct FAttr FAttr;

struct SAttr {
	u_int mode;
	u_int uid;
	u_int gid;
	u_int size;
	TimeVal atime;
	TimeVal mtime;
};
typedef struct SAttr SAttr;

typedef struct {
	u_int Filename_len;
	char *Filename_val;
} Filename;

typedef struct {
	u_int Path_len;
	char *Path_val;
} Path;

typedef struct {
	u_int NFSData_len;
	char *NFSData_val;
} NFSData;

typedef char NFSCookie[COOKIESIZE];

struct AttrStat {
	Stat status;
	union {
		FAttr attributes;
	} AttrStat_u;
};
typedef struct AttrStat AttrStat;

struct DirOpArgs {
	FHandle dir;
	Filename name;
};
typedef struct DirOpArgs DirOpArgs;

struct DirOpResBody {
	FHandle file;
	FAttr attributes;
};
typedef struct DirOpResBody DirOpResBody;

struct DirOpRes {
	Stat status;
	union {
		DirOpResBody diropok;
	} DirOpRes_u;
};
typedef struct DirOpRes DirOpRes;

struct SAttrArgs {
	FHandle file;
	SAttr attributes;
};
typedef struct SAttrArgs SAttrArgs;

struct ReadLinkRes {
	Stat status;
	union {
		Path data;
	} ReadLinkRes_u;
};
typedef struct ReadLinkRes ReadLinkRes;

struct ReadArgs {
	FHandle file;
	u_int offset;
	u_int count;
	u_int totalcount;
};
typedef struct ReadArgs ReadArgs;

struct ReadResBody {
	FAttr attributes;
	NFSData data;
};
typedef struct ReadResBody ReadResBody;

struct ReadRes {
	Stat status;
	union {
		ReadResBody readResOk;
	} ReadRes_u;
};
typedef struct ReadRes ReadRes;

struct WriteArgs {
	FHandle file;
	u_int beginOffset;
	u_int offset;
	u_int totalCount;
	NFSData data;
};
typedef struct WriteArgs WriteArgs;

struct CreateArgs {
	DirOpArgs where;
	SAttr attributes;
};
typedef struct CreateArgs CreateArgs;

struct RenameArgs {
	DirOpArgs from;
	DirOpArgs to;
};
typedef struct RenameArgs RenameArgs;

struct LinkArgs {
	FHandle from;
	DirOpArgs to;
};
typedef struct LinkArgs LinkArgs;

struct SymLinkArgs {
	DirOpArgs from;
	Path to;
	SAttr attributes;
};
typedef struct SymLinkArgs SymLinkArgs;

struct ReadDirArgs {
	FHandle dir;
	NFSCookie cookie;
	u_int count;
};
typedef struct ReadDirArgs ReadDirArgs;

struct Entry {
	u_int fileId;
	Filename name;
	NFSCookie cookie;
	struct Entry *next;
};
typedef struct Entry Entry;

struct ReadDirResBody {
	Entry *entries;
	bool_t eof;
};
typedef struct ReadDirResBody ReadDirResBody;

struct ReadDirRes {
	Stat status;
	union {
		ReadDirResBody readdirok;
	} ReadDirRes_u;
};
typedef struct ReadDirRes ReadDirRes;

struct StatFSResBody {
	u_int tsize;
	u_int bsize;
	u_int blocks;
	u_int bfree;
	u_int bavail;
};
typedef struct StatFSResBody StatFSResBody;

struct StatFSRes {
	Stat status;
	union {
		StatFSResBody info;
	} StatFSRes_u;
};
typedef struct StatFSRes StatFSRes;

#define NFS_PROGRAM 100003
#define NFS_VERSION 2

#if defined(__STDC__) || defined(__cplusplus)
#define NFSPROC_NULL 0
extern  void * nfsproc_null_2(void *, CLIENT *);
extern  void * nfsproc_null_2_svc(void *, struct svc_req *);
#define NFSPROC_GETATTR 1
extern  AttrStat * nfsproc_getattr_2(char *, CLIENT *);
extern  AttrStat * nfsproc_getattr_2_svc(char *, struct svc_req *);
#define NFSPROC_SETATTR 2
extern  AttrStat * nfsproc_setattr_2(SAttrArgs *, CLIENT *);
extern  AttrStat * nfsproc_setattr_2_svc(SAttrArgs *, struct svc_req *);
#define NFSPROC_ROOT 3
extern  void * nfsproc_root_2(void *, CLIENT *);
extern  void * nfsproc_root_2_svc(void *, struct svc_req *);
#define NFSPROC_LOOKUP 4
extern  DirOpRes * nfsproc_lookup_2(DirOpArgs *, CLIENT *);
extern  DirOpRes * nfsproc_lookup_2_svc(DirOpArgs *, struct svc_req *);
#define NFSPROC_READLINK 5
extern  ReadLinkRes * nfsproc_readlink_2(char *, CLIENT *);
extern  ReadLinkRes * nfsproc_readlink_2_svc(char *, struct svc_req *);
#define NFSPROC_READ 6
extern  ReadRes * nfsproc_read_2(ReadArgs *, CLIENT *);
extern  ReadRes * nfsproc_read_2_svc(ReadArgs *, struct svc_req *);
#define NFSPROC_WRITECACHE 7
extern  void * nfsproc_writecache_2(void *, CLIENT *);
extern  void * nfsproc_writecache_2_svc(void *, struct svc_req *);
#define NFSPROC_WRITE 8
extern  AttrStat * nfsproc_write_2(WriteArgs *, CLIENT *);
extern  AttrStat * nfsproc_write_2_svc(WriteArgs *, struct svc_req *);
#define NFSPROC_CREATE 9
extern  DirOpRes * nfsproc_create_2(CreateArgs *, CLIENT *);
extern  DirOpRes * nfsproc_create_2_svc(CreateArgs *, struct svc_req *);
#define NFSPROC_REMOVE 10
extern  Stat * nfsproc_remove_2(DirOpArgs *, CLIENT *);
extern  Stat * nfsproc_remove_2_svc(DirOpArgs *, struct svc_req *);
#define NFSPROC_RENAME 11
extern  Stat * nfsproc_rename_2(RenameArgs *, CLIENT *);
extern  Stat * nfsproc_rename_2_svc(RenameArgs *, struct svc_req *);
#define NFSPROC_LINK 12
extern  Stat * nfsproc_link_2(LinkArgs *, CLIENT *);
extern  Stat * nfsproc_link_2_svc(LinkArgs *, struct svc_req *);
#define NFSPROC_SYMLINK 13
extern  Stat * nfsproc_symlink_2(SymLinkArgs *, CLIENT *);
extern  Stat * nfsproc_symlink_2_svc(SymLinkArgs *, struct svc_req *);
#define NFSPROC_MKDIR 14
extern  DirOpRes * nfsproc_mkdir_2(CreateArgs *, CLIENT *);
extern  DirOpRes * nfsproc_mkdir_2_svc(CreateArgs *, struct svc_req *);
#define NFSPROC_RMDIR 15
extern  Stat * nfsproc_rmdir_2(DirOpArgs *, CLIENT *);
extern  Stat * nfsproc_rmdir_2_svc(DirOpArgs *, struct svc_req *);
#define NFSPROC_READDIR 16
extern  ReadDirRes * nfsproc_readdir_2(ReadDirArgs *, CLIENT *);
extern  ReadDirRes * nfsproc_readdir_2_svc(ReadDirArgs *, struct svc_req *);
#define NFSPROC_STATFS 17
extern  StatFSRes * nfsproc_statfs_2(char *, CLIENT *);
extern  StatFSRes * nfsproc_statfs_2_svc(char *, struct svc_req *);
extern int nfs_program_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define NFSPROC_NULL 0
extern  void * nfsproc_null_2();
extern  void * nfsproc_null_2_svc();
#define NFSPROC_GETATTR 1
extern  AttrStat * nfsproc_getattr_2();
extern  AttrStat * nfsproc_getattr_2_svc();
#define NFSPROC_SETATTR 2
extern  AttrStat * nfsproc_setattr_2();
extern  AttrStat * nfsproc_setattr_2_svc();
#define NFSPROC_ROOT 3
extern  void * nfsproc_root_2();
extern  void * nfsproc_root_2_svc();
#define NFSPROC_LOOKUP 4
extern  DirOpRes * nfsproc_lookup_2();
extern  DirOpRes * nfsproc_lookup_2_svc();
#define NFSPROC_READLINK 5
extern  ReadLinkRes * nfsproc_readlink_2();
extern  ReadLinkRes * nfsproc_readlink_2_svc();
#define NFSPROC_READ 6
extern  ReadRes * nfsproc_read_2();
extern  ReadRes * nfsproc_read_2_svc();
#define NFSPROC_WRITECACHE 7
extern  void * nfsproc_writecache_2();
extern  void * nfsproc_writecache_2_svc();
#define NFSPROC_WRITE 8
extern  AttrStat * nfsproc_write_2();
extern  AttrStat * nfsproc_write_2_svc();
#define NFSPROC_CREATE 9
extern  DirOpRes * nfsproc_create_2();
extern  DirOpRes * nfsproc_create_2_svc();
#define NFSPROC_REMOVE 10
extern  Stat * nfsproc_remove_2();
extern  Stat * nfsproc_remove_2_svc();
#define NFSPROC_RENAME 11
extern  Stat * nfsproc_rename_2();
extern  Stat * nfsproc_rename_2_svc();
#define NFSPROC_LINK 12
extern  Stat * nfsproc_link_2();
extern  Stat * nfsproc_link_2_svc();
#define NFSPROC_SYMLINK 13
extern  Stat * nfsproc_symlink_2();
extern  Stat * nfsproc_symlink_2_svc();
#define NFSPROC_MKDIR 14
extern  DirOpRes * nfsproc_mkdir_2();
extern  DirOpRes * nfsproc_mkdir_2_svc();
#define NFSPROC_RMDIR 15
extern  Stat * nfsproc_rmdir_2();
extern  Stat * nfsproc_rmdir_2_svc();
#define NFSPROC_READDIR 16
extern  ReadDirRes * nfsproc_readdir_2();
extern  ReadDirRes * nfsproc_readdir_2_svc();
#define NFSPROC_STATFS 17
extern  StatFSRes * nfsproc_statfs_2();
extern  StatFSRes * nfsproc_statfs_2_svc();
extern int nfs_program_2_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_Stat (XDR *, Stat*);
extern  bool_t xdr_FType (XDR *, FType*);
extern  bool_t xdr_FHandle (XDR *, FHandle);
extern  bool_t xdr_TimeVal (XDR *, TimeVal*);
extern  bool_t xdr_FAttr (XDR *, FAttr*);
extern  bool_t xdr_SAttr (XDR *, SAttr*);
extern  bool_t xdr_Filename (XDR *, Filename*);
extern  bool_t xdr_Path (XDR *, Path*);
extern  bool_t xdr_NFSData (XDR *, NFSData*);
extern  bool_t xdr_NFSCookie (XDR *, NFSCookie);
extern  bool_t xdr_AttrStat (XDR *, AttrStat*);
extern  bool_t xdr_DirOpArgs (XDR *, DirOpArgs*);
extern  bool_t xdr_DirOpResBody (XDR *, DirOpResBody*);
extern  bool_t xdr_DirOpRes (XDR *, DirOpRes*);
extern  bool_t xdr_SAttrArgs (XDR *, SAttrArgs*);
extern  bool_t xdr_ReadLinkRes (XDR *, ReadLinkRes*);
extern  bool_t xdr_ReadArgs (XDR *, ReadArgs*);
extern  bool_t xdr_ReadResBody (XDR *, ReadResBody*);
extern  bool_t xdr_ReadRes (XDR *, ReadRes*);
extern  bool_t xdr_WriteArgs (XDR *, WriteArgs*);
extern  bool_t xdr_CreateArgs (XDR *, CreateArgs*);
extern  bool_t xdr_RenameArgs (XDR *, RenameArgs*);
extern  bool_t xdr_LinkArgs (XDR *, LinkArgs*);
extern  bool_t xdr_SymLinkArgs (XDR *, SymLinkArgs*);
extern  bool_t xdr_ReadDirArgs (XDR *, ReadDirArgs*);
extern  bool_t xdr_Entry (XDR *, Entry*);
extern  bool_t xdr_ReadDirResBody (XDR *, ReadDirResBody*);
extern  bool_t xdr_ReadDirRes (XDR *, ReadDirRes*);
extern  bool_t xdr_StatFSResBody (XDR *, StatFSResBody*);
extern  bool_t xdr_StatFSRes (XDR *, StatFSRes*);

#else /* K&R C */
extern bool_t xdr_Stat ();
extern bool_t xdr_FType ();
extern bool_t xdr_FHandle ();
extern bool_t xdr_TimeVal ();
extern bool_t xdr_FAttr ();
extern bool_t xdr_SAttr ();
extern bool_t xdr_Filename ();
extern bool_t xdr_Path ();
extern bool_t xdr_NFSData ();
extern bool_t xdr_NFSCookie ();
extern bool_t xdr_AttrStat ();
extern bool_t xdr_DirOpArgs ();
extern bool_t xdr_DirOpResBody ();
extern bool_t xdr_DirOpRes ();
extern bool_t xdr_SAttrArgs ();
extern bool_t xdr_ReadLinkRes ();
extern bool_t xdr_ReadArgs ();
extern bool_t xdr_ReadResBody ();
extern bool_t xdr_ReadRes ();
extern bool_t xdr_WriteArgs ();
extern bool_t xdr_CreateArgs ();
extern bool_t xdr_RenameArgs ();
extern bool_t xdr_LinkArgs ();
extern bool_t xdr_SymLinkArgs ();
extern bool_t xdr_ReadDirArgs ();
extern bool_t xdr_Entry ();
extern bool_t xdr_ReadDirResBody ();
extern bool_t xdr_ReadDirRes ();
extern bool_t xdr_StatFSResBody ();
extern bool_t xdr_StatFSRes ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_NFS_H_RPCGEN */
